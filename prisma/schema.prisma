datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider        = "prisma-client-js"
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  todos               Todo[]
}

model Account {
  id                  String    @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?   @db.Text
  access_token        String?   @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?   @db.Text
  session_state       String?

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String    @id @default(cuid())
  sessionToken        String    @unique
  userId              String
  expires             DateTime

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier          String
  token               String    @unique
  expires             DateTime

  @@unique([identifier, token])
}

model Todo {
  id                  Int       @id @default(autoincrement()) @unique
  userId              String    
  title               String     
  status              String?   @default("new")
  detail              String?   @default("")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
  role                Role      @default(USER)

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}